# -*- coding: utf-8 -*-
"""K-Means

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z-ITpbD1BNgjnYgIUNNDA9t5d-7ANHRi
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans

# Load your dataset
data_path = 'dataset.csv'
data = pd.read_csv(data_path)

# Selecting the relevant features for the model
features = ['danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness',
            'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo']
X = data[features]

# Normalize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Apply K-Means clustering
num_clusters = 50
kmeans = KMeans(n_clusters=num_clusters, random_state=42)
data['cluster'] = kmeans.fit_predict(X_scaled)

def get_kmeans_recommendations(song_id, num_recommendations=10):
    # Find the cluster of the input song
    input_song_cluster = data.loc[data['id'] == song_id, 'cluster'].values[0]

    # Filter songs that are in the same cluster
    cluster_songs = data[data['cluster'] == input_song_cluster]

    # Randomly select songs from the same cluster
    if len(cluster_songs) > num_recommendations:
        recommendations = cluster_songs.sample(n=num_recommendations)
    else:
        recommendations = cluster_songs

    return recommendations

# Example
song_id = '54TSw5CeLFZu15srfUyWZ8'
recommendations = get_kmeans_recommendations(song_id)

print("Recommendations based on K-Means clustering:")
print(recommendations[['id', 'name', 'artists']])

display(recommendations[['id', 'name', 'artists']])